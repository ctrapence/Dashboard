---
title: "GAPMINDER | LIFE EXPECTANCIES 2007"
format:  dashboard
embed-resources: true
theme: lux
---

```{r, echo = F, message = F, warning = F,include=FALSE}


# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, outbreaks, bslib, bsicons, shiny, 
               rgeoboundaries, plotly, htmltools, reactable)

# view data
head(outbreaks::fluH7N9_china_2013)
```

```{r}

total_cases <-  fluH7N9_china_2013 %>% distinct() %>% 
                 nrow()

            
total_death <- fluH7N9_china_2013 %>% 
   filter(outcome=="Death") %>% 
   distinct() %>%
   nrow()           

  
total_hospital <- fluH7N9_china_2013 %>% 
   filter(!is.na(date_of_hospitalisation)) %>% 
   distinct() %>%
   nrow()           


```
# Home

## Row 1 {height=25%}
```{r}
value_box(
  title = "Total cases",
  value = total_cases,
  showcase = bsicons::bs_icon("virus"),
  theme = value_box_theme(bg = "#518fd6"),
  p(paste0("(", "China", ")"))
)
```


```{r}

value_box(
  title = "Total Hospitalization",
  value = total_hospital,
  showcase = bsicons::bs_icon("hospital"),
  theme = value_box_theme(bg = "#518fd6"),
  p(paste0("(", "China", ")"))
)

```

```{r}
value_box(
  title = "Total deaths",
  value = total_death,
  showcase = bsicons::bs_icon("book"),
  theme = value_box_theme(bg = "#518fd6"),
  p(paste0("(", "China", ")"))
)

```
## Row 2 {Height=30}


```{r}
All_cases <-  fluH7N9_china_2013 %>% distinct() %>% 
               group_by(province) %>% 
  summarise(total_cases=n(), .groups = 'drop') %>% 
  data.frame()

  
p <- All_cases %>% ggplot(aes(x=fct_reorder(province,total_cases),
                         y=total_cases))+
  geom_col(fill="darkblue")+
  coord_flip()+
  theme_classic()+
  labs(title = "Total Flu H7N9 Cases per Province in China (2013)",
       x = "Province",
       y = "Total Cases")

p
```

```{r results='hide', message=FALSE, warning = FALSE}
pacman::p_load(outbreaks, rgeoboundaries, plotly)

### MAP OF CASES PER PROVINCE
province_summary <- fluH7N9_china_2013 %>% 
  group_by(province) %>% 
  summarise(total_cases = n()) 

china_map <- rgeoboundaries::gb_adm1("china")

# Check the keys to see if join will be successful
setdiff(province_summary$province, china_map$shapeName)
setdiff(china_map$shapeName, province_summary$province)
# Some work to be done to harmonize these

china_map <- china_map %>%
  # Remove the strings Province, Municipality and Autonomous Region 
  # to allow matching
  mutate(province = str_trim(
    str_remove(shapeName, "Province|Municipality|Autonomous Region")
  ))

# Check if join will work fine
setdiff(province_summary$province, china_map$province)

# Fix Guangdong, which based on a quick Google is actually Guangzhou
china_map <- china_map %>% 
  mutate(province = if_else(province == "Guangzhou", "Guangdong", province)) 
  
# Check again
setdiff(province_summary$province, china_map$province)

# Now join
china_map_joined <- 
  left_join(china_map, province_summary, by = "province") %>% 
  # Create tooltip label 
  mutate(tooltip_label = paste0(province, ": ", total_cases))

china_map_plot <- ggplot(china_map_joined) +
  geom_sf(aes(fill = total_cases, text = tooltip_label)) + 
  theme_void() +
  labs(fill = "Number of Cases") + 
  theme(legend.position = "none")

china_map_plot_ggplotly <- 
  ggplotly(china_map_plot, tooltip = "text")

```

```{r}
china_map_plot_ggplotly

```
# Download
```{r}
library(htmltools)

htmltools::browsable(
  tagList(
    reactable(head(outbreaks::fluH7N9_china_2013)), 
    
tags$button("Download as CSV", 
            onclick = "Reactable.downloadDataCSV('gapminder-table')")
  )

)
```

```

```
